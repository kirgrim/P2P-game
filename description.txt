The application uses pure peer-to-peer approach(every user is equal to everyone else).Each user have its server part and client part.New user can connect to any user currently exist in tournament by knowing its credentials. To manage both client and server behavior in one entity multithreading technique was used.User can leave tournament  only when he finished games with all users which were in tournament at that moment. Main commands for user: host + user credentials in form “address:port”   example: (host192.168.0.136:60628)   command used to connect new user to tournament   list    command used to display list of all players(can be used to   check with whom you still need to play)  play + user credentials in form “address:port”    example: (play192.168.0.136:60628)   command used to send request to make your move in game.   quit   command used to quit game if condition of quitting is satisfied  Precise solution description:
1.Once a user run his application and know credentials of another user who is already in game,he should send him request message host described above.After he does so he receives list of all users present in tournament,as well as other users updates there lists with new player credentials. Each player has its unique name provided using random number technique.  
2.If user feels ready to make his move,he does it buy sending play message.After that he will be asked to type his digit and it will be kept in memory(encrypted).If both user and his opponent made their move ,the information about winner will be generated.   
3.At anytime user can see information about his games by sending list.  4.If user wants to leave tournament he should send message quit.And if he already played with everybody in tournament he is allowed to leave it.Before leaving tournament user displays information about all games he played.  
